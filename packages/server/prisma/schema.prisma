generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id               Int       @id @default(autoincrement())
  code             String    @unique
  date             DateTime
  description      String    @default("")
  name             String
  players          Players[]
  teacher          User      @relation("TaughtGames", fields: [teacherId], references: [id])
  teacherId        Int
  teams            Team[]
  status           Status    @default(draft)
  step             Int       @default(0)
  lastFinishedStep Int       @default(0)
}

enum Status {
  draft
  ready
  playing
  finished
}

model Players {
  game            Game            @relation(fields: [gameId], references: [id])
  gameId          Int
  team            Team            @relation(fields: [teamId], references: [id])
  teamId          Int
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  profile         Profile?        @relation(fields: [profileId], references: [id])
  profileId       Int?            @unique
  actions         PlayerActions[]
  hasFinishedStep Boolean         @default(true)

  @@id([userId, gameId])
}

model User {
  id          Int       @id @default(autoincrement())
  country     String
  email       String    @unique
  firstName   String
  lastName    String
  isTeacher   Boolean   @default(false)
  playedGames Players[]
  taughtGames Game[]    @relation("TaughtGames")
}

model Team {
  id           Int           @id @default(autoincrement())
  game         Game          @relation(fields: [gameId], references: [id])
  gameId       Int
  name         String
  scenarioName String        @default("")
  players      Players[]
  actions      TeamActions[]
  isDeleted    Boolean       @default(false)

  @@unique([gameId, name], map: "Team_gameId_name_unique_constraint")
}

model Profile {
  id                Int             @id @default(autoincrement())
  player            Players?
  personalization   Personalization @relation(fields: [personalizationId], references: [id])
  personalizationId Int
  status            ProfileStatus   @default(draft)
  lastStatusUpdate  DateTime        @default(now())
}

enum ProfileStatus {
  draft
  pendingValidation
  validated
}

model Personalization {
  id                     Int                 @id @default(autoincrement())
  origin                 String
  personalizationName    PersonalizationName
  numberAdults           Int?
  numberKids             Int?
  car                    Boolean?
  carEnergy              String?
  carConsumption         Float?
  carDistanceAlone       Float?
  carDistanceHoushold    Float?
  carAge                 String?
  carDistanceCarsharing  Float?
  planeDistance          Float?
  trainDistance          Float?
  houseType              String?
  houseSurface           Float?
  heatingEnergy          String?
  heatingConsumption     Float?
  heatingInvoice         Float?
  heatPump               Boolean?
  heatingTemperature     Boolean?
  airConditionning       Boolean?
  aCRoomNb               Int?
  aCDaysNb               Float?
  showerBath             String?
  showerNumber           Int?
  showerTime             String?
  cookingKettle          Boolean?
  cookingPlateTime       Float?
  cookingOvenTime        Float?
  cleaningWashingTime    Float?
  cleaningDryerTime      Float?
  cleaningDishwasherTime Float?
  refrigeratorNumber     Int?
  freezerNumber          Int?
  lightingSystem         String?
  eatingVegan            Boolean?
  eatingVegetables       Boolean?
  eatingDairies          Boolean?
  eatingEggs             Boolean?
  eatingMeat             Boolean?
  eatingTinDrink         Float?
  eatingZeroWaste        Boolean?
  eatingLocal            Boolean?
  eatingCatNumber        Int?
  eatingDogNumber        Int?
  eatingHorse            Boolean?
  numericEquipment       Boolean?
  numericWebTimeDay      Boolean?
  numericVideoTimeDay    Boolean?
  clothingQuantity       Boolean?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  Profile                Profile[]

  @@unique([origin, personalizationName], map: "personalization_persona_unique_constraint")
}

enum PersonalizationName {
  form
  oilgre
}

model Action {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  description     String          @default("")
  step            Int
  helpCardLink    String          @default("")
  actionPointCost Int
  financialCost   Float
  points          Int             @default(0)
  playerActions   PlayerActions[]
}

model PlayerActions {
  id          Int     @id @default(autoincrement())
  player      Players @relation(fields: [userId, gameId], references: [userId, gameId])
  userId      Int
  gameId      Int
  action      Action  @relation(fields: [actionId], references: [id])
  actionId    Int
  isPerformed Boolean @default(false)

  @@unique([id, userId])
}

model ProductionAction {
  id                     Int                  @id @default(autoincrement())
  name                   ProductionActionName @unique
  type                   ProductionActionType
  order                  Int
  step                   Int
  helpCardLink           String
  unit                   ProductionActionUnit
  min                    Float
  max                    Float
  credibilityThreshold   Float
  areaEnergy             Float?
  totalEnergy            Float?
  powerNeededKWh         Float
  lcoe                   Float
  currentYearPowerNeedGw Float
  pointsIntervals        PointsInterval[]
  teamActions            TeamActions[]
  defaultTeamValue       Float
  isPlayable             Boolean              @default(false)
}

enum ProductionActionName {
  biomass
  geothermal
  hydraulic
  offshoreWindTurbine
  onshoreWindTurbine
  photovoltaicFarm
  photovoltaicRoof
  thermalSolar
  tidal
  wave
  nuclear
}

enum ProductionActionType {
  offshore
  nuclear
  terrestrial
}

enum ProductionActionUnit {
  area
  percentage
}

model PointsInterval {
  id                 Int               @id @default(autoincrement())
  min                Float
  max                Float
  points             Int
  ProductionAction   ProductionAction? @relation(fields: [productionActionId], references: [id])
  productionActionId Int?
}

model TeamActions {
  id        Int              @id @default(autoincrement())
  team      Team             @relation(fields: [teamId], references: [id])
  teamId    Int
  action    ProductionAction @relation(fields: [actionId], references: [id])
  actionId  Int
  value     Float
  isTouched Boolean          @default(false)

  @@unique([id, teamId])
}
