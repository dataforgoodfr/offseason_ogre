generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id           Int       @id @default(autoincrement())
  date         DateTime
  description  String    @default("")
  name         String
  players      Players[]
  teacher      User      @relation("TaughtGames", fields: [teacherId], references: [id])
  teacherId    Int
  teams        Team[]
  status       Status    @default(draft)
  step         Int       @default(0)
  isStepActive Boolean   @default(false)
}

enum Status {
  draft
  ready
}

model Players {
  game            Game            @relation(fields: [gameId], references: [id])
  gameId          Int
  team            Team            @relation(fields: [teamId], references: [id])
  teamId          Int
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  actions         PlayerActions[]
  hasFinishedStep Boolean         @default(true)

  @@id([userId, gameId])
}

model User {
  id          Int       @id @default(autoincrement())
  country     String
  email       String    @unique
  firstName   String
  lastName    String
  isTeacher   Boolean   @default(false)
  playedGames Players[]
  taughtGames Game[]    @relation("TaughtGames")
}

model Team {
  id      Int           @id @default(autoincrement())
  game    Game          @relation(fields: [gameId], references: [id])
  gameId  Int
  name    String
  players Players[]
  actions TeamActions[]

  @@unique([gameId, name], map: "Team_gameId_name_unique_constraint")
}

model Action {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  description     String          @default("")
  step            Int
  helpCardLink    String          @default("")
  actionPointCost Int
  financialCost   Float
  players         PlayerActions[]
}

model PlayerActions {
  id          Int     @id @default(autoincrement())
  player      Players @relation(fields: [userId, gameId], references: [userId, gameId])
  userId      Int
  gameId      Int
  action      Action  @relation(fields: [actionId], references: [id])
  actionId    Int
  isPerformed Boolean @default(false)

  @@unique([id, userId])
}

model ProductionAction {
  id                     Int                  @id @default(autoincrement())
  // TODO: type name when all production actions are listed.
  name                   String               @unique
  type                   ProductionActionType
  order                  Int
  step                   Int
  helpCardLink           String
  unit                   ProductionActionUnit
  min                    Float
  max                    Float
  credibilityThreshold   Float
  areaEnergy             Float?
  totalEnergy            Float?
  powerNeededKWh         Float
  lcoe                   Float
  currentYearPowerNeedGw Float
  teamActions            TeamActions[]
  defaultTeamValue       Float
}

enum ProductionActionType {
  terrestrial
}

enum ProductionActionUnit {
  area
  percentage
}

model TeamActions {
  id        Int              @id @default(autoincrement())
  team      Team             @relation(fields: [teamId], references: [id])
  teamId    Int
  action    ProductionAction @relation(fields: [actionId], references: [id])
  actionId  Int
  value     Float
  isTouched Boolean          @default(false)

  @@unique([id, teamId])
}
